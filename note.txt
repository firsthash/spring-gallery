@Test
public void getAccount() throws Exception {
    this.mockMvc.perform(get("/accounts/1").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
        .andExpect(status().isOk())
        .andExpect(content().contentType("application/json"))
        .andExpect(jsonPath("$.name").value("Lee"));
}

///////////

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@TestPropertySource({"/spring-security.properties",
                     "/rabbitmq-default.properties",
                     "/mongodb-default.properties",
                     "/webapp-override.properties"})
@ContextHierarchy({
    @ContextConfiguration("classpath:**/security-config.xml"),
    @ContextConfiguration(classes = RootConfig.class),
    @ContextConfiguration(classes = SpringMvcConfig.class)
})
public class BaseConfiguredMvcIntegrationTest {
}

////////////


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewNames" value="redirect*" />
    </bean>


    <jpa:repositories base-package="org.yuliskov.oldsite.repositories"/>

        <mvc:interceptor>
            <mvc:mapping path="/"/>
            <bean id="domainNameInterceptor" class="org.yuliskov.oldsite.utils.DomainNameInterceptor"/>
        </mvc:interceptor>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/classes/pages_old/" p:suffix=".jsp" p:order="2"/>


    <mvc:resources location="classpath:/static/oldsite/" mapping="/old/static/**"/>

///////

        //parse: function(response) {
        //    if (this.init == false) {
        //        this.init = true;
        //        this.set({
        //            content: new module.BaseItem(),
        //            children: new module.MenuItems()
        //        });
        //    }
        //    this.content = response.content;
        //    this.children = response.children;
        //    delete response.content;
        //    delete response.children;
        //    return response;
        //},

        //parse: function(response) {
        //    console.log(response);
        //
        //    var content = new module.MenuItem(response.content || {});
        //    this.set('content', content);
        //    delete response.content;
        //
        //    var children = new module.MenuItems(response.children || []);
        //    this.set('children', children);
        //    delete response.children;
        //    return response;
        //},
        //initialize: function() {
        //    // because initialize is called after parse
        //    _.defaults(this, {
        //        children: new module.MenuItems(),
        //        content: new module.MenuItem()
        //    });
        //},
        //parse: function(response) {
        //    if (_.has(response, "children")) {
        //        this.children = new module.MenuItems(response.children);
        //        delete response.children;
        //    }
        //    if (_.has(response, "content")) {
        //        this.content = new module.MenuItem(response.content);
        //        delete response.content;
        //    }
        //    return response;
        //},
        //toJSON: function() {
        //    var json = _.clone(this.attributes);
        //    json.children = this.children.toJSON();
        //    json.content = this.content.toJSON();
        //    return json;
        //}

\\\\\\\\\\\\\\

<!--<mvc:interceptor>-->
<!--<mvc:mapping path="/"/>-->
<!--&lt;!&ndash; to change locale: http://localhost:8080/?locale=ru &ndash;&gt;-->
<!--<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>-->
<!--</mvc:interceptor>-->
<!-- intercept only root path -->


//Object language = retrieveSession().getAttribute(LANGUAGE);
//return language == null ? RUSSIAN : (String) language;

//////

element.style {
    position: relative;
    top: 1.4em;
    z-index: 10000;
    right: 0p;
    left: 11.4em;
    /* background-color: white; */
}

//////////////

@Component
@Scope("session")
public class Cart { .. }
and then

@Inject
private Cart cart;
should work, if it is declared in the web context (dispatcher-servlet.xml). An alternative option is to use the raw session and put your cart object there:

@RequestMapping(..)
public String someControllerMethod(HttpSession session) {
    session.addAttribute(Constants.CART, new Cart();
    ...
    Cart cart = (Cart) session.getAttribute(Constants.CART);
}

//////

public static UserDetails currentUserDetails(){
    SecurityContext securityContext = SecurityContextHolder.getContext();
    Authentication authentication = securityContext.getAuthentication();
    if (authentication != null) {
        Object principal = authentication.getPrincipal();
        return principal instanceof UserDetails ? (UserDetails) principal : null;
    }
    return null;
}


//////

// example usage
public static HttpSession session() {
    ServletRequestAttributes attr = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
    return attr.getRequest().getSession(true); // true == allow create
}

//////

Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

if (principal instanceof UserDetails) {
  String username = ((UserDetails)principal).getUsername();
} else {
  String username = principal.toString();
}

////////

@ContextConfiguration(value = "/META-INF/spring/test-app-context.xml")
@RunWith(SpringJUnit4ClassRunner.class)
public class BeansInContextTest {
 
     @Autowired
     ApplicationContext applicationContext;


//////

spring, tests:
http://habrahabr.ru/post/259055/

hibernate cache, EHCache:
http://habrahabr.ru/post/135176/
http://habrahabr.ru/hub/java/

///////

    <div id="loading" style="position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); z-index: 100; text-align: center">
        <h5>Никита Лыськов</h5>
        <img style="width: 50%;" src="img/loading.gif"/>
    </div>

/////

ResponseEntity<List<MenuItem> >

/////

        textarea:focus {
            width: 50em!important;
            height: 20em;
            white-space: pre;
            word-wrap: normal;
            overflow: initial;
        }

        textarea {
            overflow: hidden;
            resize: none;
        }

//////

this.on('error', function(){this.reset(this.data)}, this);
this.listenToOnce(this.items, 'reset', function() {console.log('reset');this.render()});

///////

    <script type="text/javascript">
        if ((location.protocol == 'http:') && (location.port == '' || location.port == '8080'))
            document.write('<base href="/static2/">');
        else document.write('<base href="../static2/">');
    </script>

//////

<mvc:annotation-driven>
  <mvc:message-converters register-defaults="true">
    <bean class="org.springframework.http.converter.StringHttpMessageConverter">
      <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
    </bean>
  </mvc:message-converters>
</mvc:annotation-driven>


//////

<!-- <bean class="org.yuliskov.nikitaliskov.config.WebSecurityConfig"/> -->

/////


    <!-- <mvc:resources location="classpath:/static/" mapping="/static/**" cache-period="#{24*60*60}"/> -->

//////

        <!-- cache all for one day -->
        <!-- exclude dynamic parts -->
<!--         <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/crud/**"/>
            <bean id="responseCachingFilter" class="org.springframework.web.servlet.mvc.WebContentInterceptor"
                p:cacheSeconds="#{24*60*60}"/>
        </mvc:interceptor> -->
<!--         <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="httpHeaderInterceptor" class="org.yuliskov.nikart.utils.HttpHeaderInterceptor"/>
        </mvc:interceptor> -->

///////

<!--    <bean id="logger" class="org.slf4j.LoggerFactory" factory-method="getLogger">
        <constructor-arg value="defaultLogger"/>
    </bean>-->

    <!-- other beans -->

////////

def make_batch():
    begin = """@echo off
set SCRIPTDIR=%~dp0
"""
    template = 'set %s=%s\n'
    end = """
if "%1"=="" (
    start "" "%SCRIPTDIR%\media\Total Commander\TOTALCMD64.EXE"
) else (
    start "" %*
)
"""
    make('env.bat', begin, template, end)

/////


    /**
     * Converts model's image to data uri (inline src) format.
     */
    private String toDataUri(ImageModel model) {
        MediaType type = model.getPreviewType();
        byte[] content = model.getPreview();
        String res = String.format("data:%s;base64,%s", type.toString(), DatatypeConverter.printBase64Binary(content));
        return res;
    }

/////

<script>
    require(['/static/js/common.js'], function(common) {
        <c:choose>
        <c:when test="${admin==true}">
        var module = 'app/admin';
        </c:when>
        <c:otherwise>
        var module = 'app/main';
        </c:otherwise>
        </c:choose>
        require([module], function(module) {
            new module.AppView({collection: module.galleryModelCollection, SectionView: module.SectionView, ContactsView: module.ContactsView,
                GalleryModelView: module.GalleryModelView, imageModelCollection: module.imageModelCollection, GalleryModel: module.GalleryModel,
                // used inside other methods
                CarouselItemView: module.CarouselItemView, ImageModelView: module.ImageModelView});
        });
    });
</script>

/////

    <c:if test="${admin}">
        <div class="row btn-group">
            <button id="addGallery" class="btn btn-primary">
                Add Gallery
            </button>
        </div>
    </c:if>

////

.method public onCreateOptionsMenu(Landroid/view/Menu;)Z
    .locals 7
    .param p1, "menu"    # Landroid/view/Menu;

    .prologue
    const/16 v6, 0x4d

    const/4 v5, 0x1

    const/4 v4, 0x3

    const/4 v2, 0x2

    const/4 v3, 0x0

    .line 1127
    invoke-super {p0, p1}, Landroid/app/Activity;->onCreateOptionsMenu(Landroid/view/Menu;)Z

    .line 1129
    const v0, 0x7f0a0069

    invoke-interface {p1, v5, v2, v3, v0}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1130
    const v1, 0x1080033

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1131
    const/16 v1, 0x41

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1133
    const v0, 0x7f0a006a

    invoke-interface {p1, v2, v4, v3, v0}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1134
    const v1, 0x108003f

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1135
    const/16 v1, 0x57

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1137
    const/4 v0, 0x4

    const v1, 0x7f0a0068

    invoke-interface {p1, v2, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1138
    const v1, 0x1080060

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1139
    const/16 v1, 0x73

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1141
    const/4 v0, 0x5

    const v1, 0x7f0a006b

    invoke-interface {p1, v2, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1142
    const v1, 0x1080057

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1143
    invoke-interface {v0, v6}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1145
    const/4 v0, 0x6

    const v1, 0x7f0a006c

    invoke-interface {p1, v2, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1146
    const v1, 0x1080042

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1147
    const/16 v1, 0x50

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1149
    const/4 v0, 0x7

    const v1, 0x7f0a006d

    invoke-interface {p1, v2, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1150
    new-instance v1, Landroid/content/Intent;

    const-string v2, "android.settings.SETTINGS"

    invoke-direct {v1, v2}, Landroid/content/Intent;-><init>(Ljava/lang/String;)V

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIntent(Landroid/content/Intent;)Landroid/view/MenuItem;

    move-result-object v0

    .line 1151
    const v1, 0x1080049

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1152
    const/16 v1, 0x53

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1154
    const/16 v0, 0x8

    const v1, 0x7f0a006e

    invoke-interface {p1, v4, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1155
    const v1, 0x1080042

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1156
    invoke-interface {v0, v6}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1158
    const/16 v0, 0x9

    const v1, 0x7f0a006f

    invoke-interface {p1, v4, v0, v3, v1}, Landroid/view/Menu;->add(IIII)Landroid/view/MenuItem;

    move-result-object v0

    .line 1159
    const v1, 0x108003c

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setIcon(I)Landroid/view/MenuItem;

    move-result-object v0

    .line 1160
    const/16 v1, 0x55

    invoke-interface {v0, v1}, Landroid/view/MenuItem;->setAlphabeticShortcut(C)Landroid/view/MenuItem;

    .line 1162
    return v5
.end method

.method onDesktopItemsLoaded(Ljava/util/ArrayList;Ljava/util/ArrayList;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/ArrayList",
            "<",
            "Lorg/zeam/ItemInfo;",
            ">;",
            "Ljava/util/ArrayList",
            "<",
            "Lorg/zeam/LauncherAppWidgetInfo;",
            ">;)V"
        }
    .end annotation

    .prologue
    .line 1665
    .local p1, "shortcuts":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lorg/zeam/ItemInfo;>;"
    .local p2, "appWidgets":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lorg/zeam/LauncherAppWidgetInfo;>;"
    iget-boolean v0, p0, Lorg/zeam/Launcher;->mDestroyed:Z

    if-eqz v0, :cond_0

    .line 1672
    :goto_0
    return-void

    .line 1671
    :cond_0
    invoke-direct {p0, p1, p2}, Lorg/zeam/Launcher;->bindDesktopItems(Ljava/util/ArrayList;Ljava/util/ArrayList;)V

    goto :goto_0
.end method


//////////

def main(argv):                         
    grammar = "kant.xml"                 1
    try:                                
        opts, args = getopt.getopt(argv, "hg:d", ["help", "grammar="]) 2
    except getopt.GetoptError:           3
        usage()                          4
        sys.exit(2)                     

...

if __name__ == "__main__":
    main(sys.argv[1:])

//////////

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/pages/" p:suffix=".jsp"/>

////////////

    <c:choose>
        <c:when test="${admin}">
            <script>
                require(['/static/js/common.js'], function (common) {
                    require(['app/admin']);
                });
            </script>
        </c:when>
        <c:otherwise>
            <script>
                require(['/static/js/common.js'], function (common) {
                    require(['app/main']);
                });
            </script>
        </c:otherwise>
    </c:choose>

/////////

os.listdir(path)

///////////

os.path.walk(path, visit, arg)

/////////

import os
from os.path import join
for root, dirs, files in os.walk('/usr'):
   print "Current directory", root
   print "Sub directories", dirs
   print "Files", files

/////////////

@ResponseBody
@RequestMapping("/photo2", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
public byte[] testphoto() throws IOException {
    InputStream in = servletContext.getResourceAsStream("/images/no_image.jpg");
    return IOUtils.toByteArray(in);
}

////////////

ServletContext context = request.getSession().getServletContext();

//////////////////////////

Please try

InputStream in = this.getClass().getResourceAsStream("/SomeTextFile.txt");
Your tries didn't work because only the class loader for your classes is able to load from the classpath. You used the class loader for the java system itself.

////////////////////////

You can either:

get the HttpServletResponse and print to its Writer or OutputStream (depending on whether you want to send textual or binary data)

@RequestMapping(value = "/something")
public void helloWorld(HttpServletResponse response)  {
  response.getWriter().println("Hello World")
}
Use @ResponseBody:

@RequestMapping(value = "/something")
@ResponseBody
public String helloWorld()  {
  return "Hello World";
}
Thus your Hello World text will be written to the response stream.

///////////

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="defaultPersistenceUnit"/>
    </bean>

///////////////////

export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dspring.profiles.active=production -Ddatabase.host=$OPENSHIFT_POSTGRESQL_DB_HOST -Ddatabase.port=$OPENSHIFT_POSTGRESQL_DB_PORT"

//////////////////

export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dspring.profiles.active=production -Ddatabase.host=$OPENSHIFT_POSTGRESQL_DB_HOST -Ddatabase.port=$OPENSHIFT_POSTGRESQL_DB_PORT"

<context-param>
    <param-name>spring.profiles.default</param-name>
    <param-value>development</param-value>
</context-param>

//////////////////////

# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Djdbc.url=jdbc:postgresql://$OPENSHIFT_POSTGRESQL_DB_HOST:$OPENSHIFT_POSTGRESQL_DB_PORT/spring2"
# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Djdbc.username=admin95wjifa -Djdbc.password=ZRqmczDAr1W2"
# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Djdbc.driverClassName=org.postgresql.Driver -Djpa.database=POSTGRESQL"

# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dhsqldb.mydbpath=$OPENSHIFT_DATA_DIR/hsqldb/mydb"
# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dmysql.host=$OPENSHIFT_MYSQL_DB_HOST -Dmysql.port=$OPENSHIFT_MYSQL_DB_PORT -Dmysql.user=adminPCMnn6C -Dmysql.password=vMF7ZtH7fXqf"
# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dpsql.host=$OPENSHIFT_POSTGRESQL_DB_HOST -Dpsql.port=$OPENSHIFT_POSTGRESQL_DB_PORT -Dpsql.user=admin95wjifa -Dpsql.password=ZRqmczDAr1W2"
# export _JAVA_OPTIONS="$_JAVA_OPTIONS -Dpersistence.unit.name=psqlPersistenceUnit"

////////////////////

D:\o\m\h\spring2-gallery> rhc cartridge add postgresql-9.2 --app spring2
Adding postgresql-9.2 to application 'spring2' ... done

postgresql-9.2 (PostgreSQL 9.2)
-------------------------------
  Gears:          Located with jbossews-2.0, mysql-5.1
  Connection URL: postgresql://$OPENSHIFT_POSTGRESQL_DB_HOST:$OPENSHIFT_POSTGRESQL_DB_PORT
  Database Name:  spring2
  Password:       ZRqmczDAr1W2
  Username:       admin95wjifa

PostgreSQL 9.2 database added.  Please make note of these credentials:

   Root User: admin95wjifa
   Root Password: ZRqmczDAr1W2
   Database Name: spring2

Connection URL: postgresql://$OPENSHIFT_POSTGRESQL_DB_HOST:$OPENSHIFT_POSTGRESQL_DB_PORT

////////////////

D:\o\m\hosting> rhc app create spring2 jbossews-2.0 mysql-5.1
Application Options
-------------------
Domain:     peek
Cartridges: jbossews-2.0, mysql-5.1
Gear Size:  default
Scaling:    no

Creating application 'spring2' ... done

  MySQL 5.1 database added.  Please make note of these credentials:

       Root User: adminPCMnn6C
   Root Password: vMF7ZtH7fXqf
   Database Name: spring2

Connection URL: mysql://$OPENSHIFT_MYSQL_DB_HOST:$OPENSHIFT_MYSQL_DB_PORT/

You can manage your new MySQL database by also embedding phpmyadmin.
The phpmyadmin username and password will be the same as the MySQL credentials above.

Waiting for your DNS name to be available ... done

Cloning into 'spring2'...
The authenticity of host 'spring2-peek.rhcloud.com (184.72.195.188)' can't be established.
RSA key fingerprint is cf:ee:77:cb:0e:fc:02:d7:72:7e:ae:80:c0:90:88:a7.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'spring2-peek.rhcloud.com,184.72.195.188' (RSA) to the list of known hosts.
remote: Counting objects: 39, done.
remote: Compressing objects: 100% (31/31), done.
remote: Total 39 (delta 0), reused 39 (delta 0)
Receiving objects: 100% (39/39), 51.01 KiB | 0 bytes/s, done.
Checking connectivity... done.

Your application 'spring2' is now available.

  URL:        http://spring2-peek.rhcloud.com/
  SSH to:     52e90b725973cabec800001a@spring2-peek.rhcloud.com
  Git remote: ssh://52e90b725973cabec800001a@spring2-peek.rhcloud.com/~/git/spring2.git/
  Cloned to:  D:/other/me/hosting/spring2

Run 'rhc show-app spring2' for more details about your app.

///////////////////

//var obj = $($.parseHTML(template));

//////////////

    <!-- there is some plans to move to this database -->
<!--     <persistence-unit name="sqlitePersistenceUnit">
        <properties>
            <property name="hibernate.dialect" value="org.hibernate.dialect.SQLiteDialect"/>
            <property name="hibernate.connection.driver_class" value="org.sqlite.JDBC"/>
            <property name="hibernate.connection.url" value="jdbc:sqlite:mydb.db"/>
            <property name="hibernate.connection.username" value=""/>
            <property name="hibernate.connection.password" value=""/>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
        </properties>
    </persistence-unit> -->

////////////

<!-- <property name="hibernate.show_sql" value="true"/> -->

///////////////

# Ignore everything in this directory
*
# Except this file
!.gitignore

/////////

    //@RequestMapping(value = "GalleryModel/{id}", method = RequestMethod.PUT, consumes = "application/json")
    //@ResponseStatus(HttpStatus.OK)
    //public void updateGalleryModel(@PathVariable Long id, @RequestBody String request) throws JSONException {
    //    logger.info("Updating model {}", request);
    //
    //    JSONObject json = new JSONObject(request);
    //    GalleryModel gallery = nikArtService.findOneGallery(id);
    //
    //    if (gallery == null) {
    //        logger.info("Gallery not exist: " + request);
    //        gallery = new GalleryModel();
    //    }
    //
    //    String header = json.getString("header");
    //    String name = json.getString("name");
    //    gallery.setHeader(header);
    //    gallery.setName(name);
    //
    //    // transaction implicitly saves changes
    //    // without it you must do it yourself
    //    nikArtService.saveGallery(gallery);
    //}

//////

https://github.com/openshift/origin-server/blob/master/cartridges/openshift-origin-cartridge-jbossews/README.md

///////

<%--<script src="/static/vendor/jquery.backstretch.min.js"></script>--%>

////////

                        <configuration>
                            <webResources>
                                <resource>
                                    <!-- openshift requre dirname at end of the path, also you need to do the same in minify plugin -->
                                    <directory>${project.build.directory}/${project.build.finalName}</directory>
                                </resource>
                            </webResources>
                            <outputDirectory>webapps</outputDirectory>
                            <warName>ROOT</warName>
                        </configuration>

//////////

org.springframework.web.context.ContextLoader
org.springframework.web.servlet.FrameworkServlet
org.springframework.web.servlet.DispatcherServlet

//////////

var ImageModel = Backbone.Model.extend({
    // initialize our model
    defaults: function() {
        return {
            prefix: ''
        };
    }

});

/////////

/* align menus */
.nav, .carousel img {
    display: inline-block;
    *display:inline; /* IE7 refuses to honour inline-block */
}

........

<display-name>Spring Gallery</display-name>

/////////

<servlet>
     <servlet-name>dispatcher</servlet-name>
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <init-param>
           <param-name>contextConfigLocation</param-name>
           <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
     </init-param>
 </servlet>
 <context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>/WEB-INF/spring-security.xml
                      /WEB-INF/applicationContext.xml
                      /WEB-INF/transformation.xml
         </param-value>
 </context-param>    
 <listener>     
     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>

////

    //$.backstretch("http://localhost:8080/image/98304");

//////////

s = s.substring(0, Math.min(s.length(), 10));



JSONObject, JSONArray



<user name="admin" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_SUPERVISOR, ROLE_USER, ROLE_TELLER, ROLE_ADMIN"/>

//////

NoSuchEntityException
DaoSystemException

//////

produces = MediaType.APPLICATION_JSON_VALUE

<!-- <warSourceDirectory>${project.build.directory}/${project.build.finalName}/static</warSourceDirectory> -->

<!--                               <webXml>${project.build.directory}/${project.build.finalName}/WEB-INF/web.xml</webXml>
                              <warSourceDirectory>${project.build.directory}/${project.build.finalName}</warSourceDirectory> -->

<!--                             <webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
                            <warSourceDirectory>${project.build.directory}/${project.build.finalName}</warSourceDirectory> -->

//////////

  <!-- cache for one month -->
  <mvc:resources location="/css/" mapping="/css/**" cache-period="2592000"/>

  <!-- don't send any cache headers, rely on last-modified timestamps only -->
  <mvc:resources location="/img/" mapping="/img/**"/>
  <mvc:resources location="/js/" mapping="/js/**"/>

  <mvc:interceptors>
    <mvc:interceptor>
      <mvc:mapping path="/**/*.htm" />
        <bean id="responseCachingFilter" class="org.springframework.web.servlet.mvc.WebContentInterceptor">
          <property name="cacheSeconds" value="0" />
          <property name="useExpiresHeader" value="true" />
          <property name="useCacheControlHeader" value="true" />
          <property name="useCacheControlNoStore" value="true" />
          <property name="cacheMappings">
          <props>
            <!-- cache for one month -->
            <prop key="/**/*.htm">2592000</prop>
          </props>
        </property>
      </bean>
    </mvc:interceptor>
  </mvc:interceptors>


///////////////

    <!-- tomcat servlet handler for static content -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>

////////

        'click #changeBackground': 'changeBackground'

    getBackgroundImage: function() {
        if (!this.backgroundGallery) {
            return null;
        }

        // remove all images from gallery
        var id = this.backgroundGallery.get('id');
        console.log('id', id);
        var image = imageModelList.findWhere({gallery_id: id});
        return image;
    },
    changeBackground: function() {
        // remove all images from gallery
        var image = this.getBackgroundImage();
        if (image) {
            image.destroy();
        }

        // add new image to gallery
        _.delay(function() {$('#changeBackgroundForm input:file').click()}, 1000);
    },

    addForm: function(gallery) {
        this.backgroundGallery = gallery;

        console.log('gallery name, id', gallery.get('name'), gallery.get('id'));

        var form = _.template($('#change-background-template').html(), gallery.toJSON());

        this.$('#changeBackground').after(form);
    },

    initBackgroundForm: function(collection) {
        // sometimes collection is other object. why?
        var isCollection = collection instanceof Backbone.Collection;
        if (!isCollection) {
            return;
        }

        // create or get gallery with name 'changeBackground'
        var gallery = collection.findWhere({name: 'changeBackground'});
        if (!gallery) {
            gallery = new GalleryModel({name: 'changeBackground'});
            collection.create(gallery, {wait: true});
            // NOTE: wait till server assigns id
            this.listenToOnce(collection, 'add', this.addForm);
            return;
        }

        this.addForm(gallery);
    },

////////

        //this.listenTo(this.collection, 'sync', this.initBackgroundForm);
        //this.listenTo(imageModelList, 'sync', this.initBackgroundImage);

/////////

backbone:
this.listenTo(this.model, 'change:embed', this.render);

///////////


<profile>
    <id>openshift-old</id>
    <build>
        <finalName>my-spring-app</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${war-plugin.version}</version>
                <configuration>
                    <outputDirectory>webapps</outputDirectory>
                    <warName>ROOT</warName>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler-plugin.version}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire-plugin.version}</version>
                <configuration>
                    <includes>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</profile>



//////////


<repositories>
    <repository>
        <id>eap</id>
        <url>http://maven.repository.redhat.com/techpreview/all</url>
        <releases>
            <enabled>true</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </repository>
</repositories>
<pluginRepositories>
    <pluginRepository>
        <id>eap</id>
        <url>http://maven.repository.redhat.com/techpreview/all</url>
        <releases>
            <enabled>true</enabled>
        </releases>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </pluginRepository>
</pluginRepositories>

///////////


[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
        hideDotFiles = dotGitOnly
[branch "master"]
        remote = origin
        merge = refs/heads/master
[remote "origin"]
        url = ssh://52197a41e0b8cd8b6800019d@spring-peek.rhcloud.com/~/git/spring.git/
        url = https://firsthash:githubyurik81@github.com/firsthash/spring-gallery.git
[remote "github"]
        url = https://firsthash:githubyurik81@github.com/firsthash/spring-gallery.git
        fetch = +refs/heads/*:rifs/remotes/github/*
[remote "openshift"]
        url = ssh://52197a41e0b8cd8b6800019d@spring-peek.rhcloud.com/~/git/spring.git/
        fetch = +refs/heads/*:refs/remotes/origin/*

///////////


@CacheEvict(value = {"image", "gallery"}, allEntries = true)

@Cacheable(value = "image")
@Cacheable(value = "gallery")

////////

$('#contacts').sortable({items: 'li', cancel: 'a'})
$('#contacts a').on('mousedown', function(){this.focus();});


////////

model.addAttribute("staticUrl", "/static/");
model.addAttribute("appPrefix", "custom/");

<link href="${staticUrl}${appPrefix}css/carousel.css" rel="stylesheet">

/////////

<!-- <base href="{{request.META.HTTP_HOST}}${staticUrl}${appPrefix}custom" /> -->

//////////

        <!-- SQLite -->
        <!--<properties>-->
            <!--<property name="hibernate.dialect" value="org.hibernate.dialect.SQLiteDialect"/>-->
            <!--<property name="hibernate.connection.driver_class" value="org.sqlite.JDBC"/>-->
            <!--<property name="hibernate.connection.url" value="jdbc:sqlite:mydb.db"/>-->
            <!--<property name="hibernate.connection.username" value=""/>-->
            <!--<property name="hibernate.connection.password" value=""/>-->
            <!--<property name="hibernate.hbm2ddl.auto" value="update"/>-->
        <!--</properties>-->

///////

log4j.logger.myLogger=info, stdout
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout.ConversionPattern=%t %-5p %l - %m%n

//////////////

log4j.rootLogger = WARN, FOO, BAR
log4j.logger.foobar = INFO

log4j.appender.FOO = org.apache.log4j.RollingFileAppender
log4j.appender.FOO.layout = org.apache.log4j.PatternLayout
log4j.appender.FOO.layout.ConversionPattern = %d{ISO8601} %-5p %c ~ %m%n
log4j.appender.FOO.File = foo.log
log4j.appender.FOO.Threshold = INFO

log4j.appender.BAR = org.apache.log4j.RollingFileAppender
log4j.appender.BAR.layout = org.apache.log4j.PatternLayout
log4j.appender.BAR.layout.ConversionPattern = %d{ISO8601} %-5p %c ~ %m%n
log4j.appender.BAR.File = bar.log
log4j.appender.BAR.Threshold = WARN

////////////

log4j.logger.myLogger=info, stdout

//////////////////

The log4j levels follow the following order.

TRACE
DEBUG
INFO
WARN
ERROR
FATAL
OFF

//////////////

slf4j:
LoggerFactory.getLogger(ImageConverter.class);

////////////

-Dlog4j.configuration=<path to properties file>

////////

Log4jConfigurer.initLogging( "classpath:test/log4jconfig.xml" );

///////////

    <!--<context-param>-->
        <!--<param-name>log4jConfigLocation</param-name>-->
        <!--<param-value>/WEB-INF/classes/log4j.properties</param-value>-->
    <!--</context-param>-->

    <!--<listener>-->
        <!--<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>-->
    <!--</listener>-->

//////////

<embed src="helloworld.swf">

///////

<object width="550" height="400">
   <param name="movie" value="somefilename.swf">
   <embed src="somefilename.swf" width="550" height="400">
   </embed>
</object>

/////////////

                    <!--               <div class="carousel-caption">
                                    <h4>Thumbnail label</h4>
                                    <p>Thumbnail description</p>
                                  </div> -->

/////////////                                  

<div id="header">
    <h2 contentEditable="true">Home page of Nikita Liskov</h2>
    <%--<h1>Welcome to My Home</h1>--%>

    <%--<p class="lead">Testing async UI loading.</p>--%>
</div>

////////////////////////////

<%-- admin --%>
<%--    <c:if test="${admin}">
        <div class="btn-group">

            &lt;%&ndash;<a class="btn btn-primary" href="" onclick="$.cookie('edit_off', '')">Edit On</a>&ndash;%&gt;

            <a class="btn btn-primary" href="reset">Reset</a>

        </div>


        <!-- Note that FILES will only contain data if the request method was POST and the <form> that posted to the request had enctype="multipart/form-data". -->

        <form class="thumbnail-form" action="update_thumbnail" method="post" enctype="multipart/form-data"
              style="display:none">

            Thumbnail:<input type="file" name="thumbnail" style="width:15%"/>

            <input type="hidden" name="name"/>

        </form>
    </c:if>--%>
<%-- end admin --%>

//////////////////////////

// Load the application once the DOM is ready, using `jQuery.ready`:
// $(function(){

// copy pasted code
//_.templateSettings = {
//    interpolate: /\{\%\=(.+?)\%\}/gim,
//    evaluate: /\{\%(.+?)\%\}/gim,
//    escape: /\{\%\-(.+?)\%\}/gim
//};

//////////////////////////

1 -  http://www.youtube.com/watch?v=GDk57j7tgiM       -     KRAKATAU? - ���������... (Official video)
2 -  http://www.youtube.com/watch?v=L2vUoYcBmmA - ������� - ����� (Unofficial video) 
3 -  http://www.youtube.com/watch?v=iPGRr7kxLZg - ������� - ������� (Unofficial videoclip) 
4 -  http://www.youtube.com/watch?v=mRZ4GPUHj7s - Current 93 - In Sadness Sang (Unofficial videoclip) 
5 -  http://www.youtube.com/watch?v=bNGt0vMkvn8 - Deerhoof - There's That Grin (Unofficial videoclip) 
6 -  http://www.youtube.com/watch?v=NcQSnGKnh48 - The Gerogerigegege - Her Name's On My Cock (unofficial videoclip) 

<iframe width="560" height="315" src="//www.youtube.com/embed/GDk57j7tgiM?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<iframe width="420" height="315" src="//www.youtube.com/embed/L2vUoYcBmmA?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<iframe width="560" height="315" src="//www.youtube.com/embed/iPGRr7kxLZg?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<iframe width="560" height="315" src="//www.youtube.com/embed/mRZ4GPUHj7s?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<iframe width="560" height="315" src="//www.youtube.com/embed/bNGt0vMkvn8?rel=0" frameborder="0" allowfullscreen="true"></iframe>
<iframe width="560" height="315" src="//www.youtube.com/embed/NcQSnGKnh48?rel=0" frameborder="0" allowfullscreen="true"></iframe>

////////////////////////////

    <!-- NEW. Have problems. -->
    <!--<nikart:resources mapping="/resources/**" location="/public-resources/"/>-->

    <!-- enable file uploading with forms -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10000000"/>
    </bean>

    <!-- enable JSON processing -->

    <!--<bean class="org.springframework.web.servlet.nikart.annotation.AnnotationMethodHandlerAdapter">-->
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<ref bean="jacksonMessageConverter"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>-->
    <!--<bean id="image" class="com.yuriy.nikartart.models.ImageModel"/>-->

    <!--<bean class="org.springframework.web.servlet.nikart.annotation.AnnotationMethodHandlerAdapter">-->
        <!--<property name="messageConverters">-->
            <!--<list>-->
                <!--<ref bean="jacksonMessageConverter"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<nikart:annotation-driven>-->
        <!--<nikart:message-converters>-->
            <!--<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">-->
                <!--<property name="supportedMediaTypes">-->
                    <!--<list>-->
                        <!--<value>image/jpeg</value>-->
                        <!--<value>image/png</value>-->
                    <!--</list>-->
                <!--</property>-->
            <!--</bean>-->
        <!--</nikart:message-converters>-->
    <!--</nikart:annotation-driven>-->